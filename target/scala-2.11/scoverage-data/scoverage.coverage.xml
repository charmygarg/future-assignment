<statements>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>17</id><start>758</start><end>786</end><line>23</line><description>getFilesAndDirectories(file)</description><symbolName>edu.knoldus.Directory.getFilesAndDirectories</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>8</id><start>507</start><end>572</end><line>15</line><description>scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((file: java.io.File) =&gt; getFilesAndDirectories(file))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))</description><symbolName>scala.collection.TraversableLike.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>11</id><start>581</start><end>595</end><line>15</line><description>x$2.isDirectory().unary_!</description><symbolName>scala.Boolean.unary_!</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>20</id><start>813</start><end>846</end><line>26</line><description>throw new java.io.FileNotFoundException()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>2</id><start>384</start><end>400</end><line>13</line><description>file.isDirectory()</description><symbolName>java.io.File.isDirectory</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>5</id><start>507</start><end>540</end><line>15</line><description>scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))</description><symbolName>scala.collection.TraversableLike.filter</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>14</id><start>653</start><end>685</end><line>19</line><description>scala.this.Predef.println(&quot;It is not a directory&quot;)</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>4</id><start>526</start><end>539</end><line>15</line><description>x$1.isDirectory()</description><symbolName>java.io.File.isDirectory</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>13</id><start>402</start><end>625</end><line>13</line><description>{
  val listOfFiles: Array[java.io.File] = file.listFiles();
  val result: List[java.io.File] = scala.this.Predef.refArrayOps[java.io.File](listOfFiles).toList.++[java.io.File, List[java.io.File]](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((file: java.io.File) =&gt; getFilesAndDirectories(file))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(immutable.this.List.canBuildFrom[java.io.File]).filter(((x$2: java.io.File) =&gt; x$2.isDirectory().unary_!));
  result
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>16</id><start>640</start><end>741</end><line>18</line><description>{
  scala.this.Predef.println(&quot;It is not a directory&quot;);
  throw new java.io.FileNotFoundException()
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>7</id><start>548</start><end>548</end><line>15</line><description>scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File]))</description><symbolName>scala.Array.canBuildFrom</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getPath</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>1</id><start>292</start><end>305</end><line>11</line><description>file.exists()</description><symbolName>java.io.File.exists</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>10</id><start>504</start><end>504</end><line>15</line><description>immutable.this.List.canBuildFrom[java.io.File]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>19</id><start>813</start><end>846</end><line>26</line><description>throw new java.io.FileNotFoundException()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>18</id><start>307</start><end>793</end><line>11</line><description>{
  def getFilesAndDirectories(file: java.io.File): List[java.io.File] = if (file.isDirectory())
    {
      val listOfFiles: Array[java.io.File] = file.listFiles();
      val result: List[java.io.File] = scala.this.Predef.refArrayOps[java.io.File](listOfFiles).toList.++[java.io.File, List[java.io.File]](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((file: java.io.File) =&gt; getFilesAndDirectories(file))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(immutable.this.List.canBuildFrom[java.io.File]).filter(((x$2: java.io.File) =&gt; x$2.isDirectory().unary_!));
      result
    }
  else
    {
      scala.this.Predef.println(&quot;It is not a directory&quot;);
      throw new java.io.FileNotFoundException()
    };
  getFilesAndDirectories(file)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>9</id><start>507</start><end>572</end><line>15</line><description>scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((file: java.io.File) =&gt; getFilesAndDirectories(file))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File]))))</description><symbolName>scala.Predef.refArrayOps</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>21</id><start>274</start><end>858</end><line>10</line><description>scala.concurrent.Future.apply[List[java.io.File]](if (file.exists())
  {
    def getFilesAndDirectories(file: java.io.File): List[java.io.File] = if (file.isDirectory())
      {
        val listOfFiles: Array[java.io.File] = file.listFiles();
        val result: List[java.io.File] = scala.this.Predef.refArrayOps[java.io.File](listOfFiles).toList.++[java.io.File, List[java.io.File]](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((file: java.io.File) =&gt; getFilesAndDirectories(file))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(immutable.this.List.canBuildFrom[java.io.File]).filter(((x$2: java.io.File) =&gt; x$2.isDirectory().unary_!));
        result
      }
    else
      {
        scala.this.Predef.println(&quot;It is not a directory&quot;);
        throw new java.io.FileNotFoundException()
      };
    getFilesAndDirectories(file)
  }
else
  throw new java.io.FileNotFoundException())(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>3</id><start>433</start><end>447</end><line>14</line><description>file.listFiles()</description><symbolName>java.io.File.listFiles</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>12</id><start>485</start><end>596</end><line>15</line><description>scala.this.Predef.refArrayOps[java.io.File](listOfFiles).toList.++[java.io.File, List[java.io.File]](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](scala.this.Predef.refArrayOps[java.io.File](listOfFiles).filter(((x$1: java.io.File) =&gt; x$1.isDirectory()))).flatMap[java.io.File, Array[java.io.File]]({
  ((file: java.io.File) =&gt; getFilesAndDirectories(file))
})(scala.this.Array.canBuildFrom[java.io.File]((ClassTag.apply[java.io.File](classOf[java.io.File]): scala.reflect.ClassTag[java.io.File])))))(immutable.this.List.canBuildFrom[java.io.File]).filter(((x$2: java.io.File) =&gt; x$2.isDirectory().unary_!))</description><symbolName>scala.collection.TraversableLike.filter</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>15</id><start>697</start><end>730</end><line>20</line><description>throw new java.io.FileNotFoundException()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</source><package>edu.knoldus</package><class>Directory</class><classType>Class</classType><fullClassName>edu.knoldus.Directory</fullClassName><method>getFilesAndDirectories</method><path>D:\Scala Programs\scala-futures\src\main\scala\edu\knoldus\Directory.scala</path><id>6</id><start>549</start><end>571</end><line>15</line><description>getFilesAndDirectories(file)</description><symbolName>edu.knoldus.Directory.getFilesAndDirectories</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>